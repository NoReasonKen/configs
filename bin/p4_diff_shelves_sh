#!/home/noreason/bin/bash
help="Usage: p4_diff_shelves_sh [<OPTION>...] <CHANGE>
Show diff between shelves and workspace for files in a change
options:
    -f, --file              Only diff specific file
    -r, --rev               Diff with revision
                                - Can only be used with --file
    -i, --identical         Show output even if identical
    --vscode                Show diff in vscode
                                - Usable only when code-cli exists and code hook is ready
    -v, --verbose           Show verbose messages in console
    -h, --help              Display this help and exit

usage:
    - Diff shelves and local files in change
        p4_diff_shelves_sh 123
    - Diff shelves and local for specific file in change
        p4_diff_shelves_sh -f ./a.txt 123
        p4_diff_shelves_sh -f //a.txt 123
    - Diff specific local file in change with its specific revision
        p4_diff_shelves_sh -r 2 -f //a.txt 123
"

# shellcheck source-path=SCRIPTDIR
source "color_sh"
source "utils_sh"

verbose=false
rev=""
change=""
file=""
is_identical=false
is_vscode=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--file)
            shift; file="$1"
            ;;
        -r|--rev)
            shift; rev="$1"
            ;;
        -i|--identical)
            is_identical=true
            ;;
        -v|--verbose)
            verbose=true
            ;;
        --vscode)
            is_vscode=true
            ;;
        -h|--help)
            echo "$help" && exit 0
            ;;
        *)
            [[ -n $change ]] && { echo "Error: Can't specify multiple changes" >&2 ; exit 1; }
            change="$1"
            ;;
    esac
    shift
done

[[ -z "$change" ]] && { echo "Error: Missing change" >&2 ; exit 1; }
[[ -n "$rev" && -z "$file" ]] && { echo "Error: --rev can only be used with --file" >&2 ; exit 1; }

utils::verbose --msg-color "${CYAN}" "rev=$rev; file=$file; identical=$is_identical; vscode=$is_vscode; verbose=$verbose; change=$change" >&2
client_name="$(p4 -z tag -F %clientName% info)"
[[ "$client_name" == "none" || "$client_name" == "\*unknown\*" ]] && { echo "Error: Missing P4 Client" >&2 ; exit 1; }

# Check whether change number match
[[ -z "$(p4 -z tag -F %change% describe -S -s "$change")" ]] && { echo "Error: Invalid change" >&2 ; exit 1; }

_files=()
for (( _i=0; 1; ++_i )); do
    if ! _depot_file="$(p4 -z tag -F %depotFile${_i}% describe -S -s "$change")"; then
        echo "Error: When executing 'p4 -z tag -F %depotFile${_i}% describe -S -s $change'" >&2
        exit 1
    fi

    [[ -z "$_depot_file" ]] && break

    _files+=("$_depot_file")
done

utils::verbose --msg-color "${BGREEN}" --prompt "* " "Files:" >&2
for f in "${_files[@]}"; do
    utils::verbose "  $f" >&2
done

if [[ -n $file ]]; then
    remote_file="$(p4 -z tag -F %depotFile% where "$file")"
    if [[ ! " ${_files[*]} " =~ [[:space:]]${remote_file}[[:space:]] ]]; then
        echo "Error: Can't find target file in remote" >&2
        exit 1
    fi
    _files=("$remote_file")
    utils::verbose --msg-color "${BGREEN}" --prompt "* " "Specify only:" >&2
    utils::verbose "  $remote_file" >&2
fi

regex_add="^[0-9,]+a[0-9,]+$"
regex_mod="^[0-9,]+c[0-9,]+$"
regex_del="^[0-9,]+d[0-9,]+$"
for f in "${_files[@]}"; do
    if [[ -n "$rev" ]]; then
        diff="$(P4DIFF="" p4 diff "$f#$rev")"
    else
        diff="$(P4DIFF="" p4 diff "$f@=$change")"
    fi
    if [[ $is_identical == true || $(wc -l <<< "$diff") -ne 1 ]]; then
        if [[ $is_vscode == true ]]; then
            # Assume the file is //depot/aaa/bbb.txt@=123, save it to $HOME/workdir/.tmp/depot/aaa/bbb.@=123.txt
            # Change the order of ext and '@=xxx' to make vscode could identify the format of file
     
            tmp_folder="$HOME/workdir/.tmp"
            tmp_file_folder="$tmp_folder/$(dirname "${f#//}")"
            mkdir -p "$tmp_file_folder"
     
            tmp_file_name="$(basename "$f")"
            tmp_file_ext="${tmp_file_name##*.}"
            tmp_file_only_name="${tmp_file_name%.*}"
            tmp_file_path="$tmp_file_folder/$tmp_file_only_name.@=$change.$tmp_file_ext"
            p4 print -q "$f@=$change" > "$tmp_file_path"
     
            have_str="$(p4 have "$f")" # e.g. //depot/aaa/bbb.txt#5 - /<local workspace path>/aaa/bbb.txt
            
            # shellcheck disable=SC2029
            [[ -z "$__X11_SERVER" ]] && { echo "Error: Env '__X11_SERVER' is not set, please set this env to a host with running code-server" >&2 ; exit 1; }
            src_cmd="source \\\$HOME/bin/disguise_vscode_src"
            code_cmd="code -d ${have_str##* - } $tmp_file_path"
            ssh_x11_server_sh "\$HOME/bin/zsh -c \"$src_cmd && $code_cmd\""
        else
            # p4 diff show incorrect header, it always use base revision instead of change number
            # e.g: //new_century/2000.cpp#2 (p4); //new_century/2000.cpp@=123 (correct)
            # Hence, use self-made header instead
            _header="${ICYAN}==== $f@=$change - $(p4 -z tag -F %path% where "$f")"
            [[ -n "$rev" ]] && _header+="#$rev"
            echo -e "${_header}${NC}"
            IFS=$'\n' read -d '' -r -a lines <<< "$diff"
            for ((i=1; i < ${#lines[@]}; i++)) {
                if [[ "${lines[$i]}" =~ $regex_add ]]; then
                    echo -e "${GREEN}${lines[$i]}${NC}"
                elif [[ "${lines[$i]}" =~ $regex_mod ]]; then
                    echo -e "${IBLUE}${lines[$i]}${NC}"
                elif [[ "${lines[$i]}" =~ $regex_del ]]; then
                    echo -e "${RED}${lines[$i]}${NC}"
                else
                    echo "${lines[$i]}"
                fi
            }
        fi
    fi
done

